# Confida Database Migration Configuration
# Enhanced configuration for robust database migration management

[alembic]
# path to migration scripts
script_location = app/database/migrations

# template used to generate migration file names with timestamp
# Format: YYYYMMDD_HHMMSS_revision_id_description
file_template = %%(year)d%%(month).2d%%(day).2d_%%(hour).2d%%(minute).2d%%(second).2d_%%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
prepend_sys_path = .

# timezone to use when rendering the date within the migration file
timezone = UTC

# max length of characters to apply to the "slug" field
truncate_slug_length = 40

# set to 'true' to run the environment during the 'revision' command
revision_environment = false

# set to 'true' to allow .pyc and .pyo files without a source .py file
sourceless = false

# version path separator
version_path_separator = os

# set to 'true' to search source files recursively
recursive_version_locations = false

# the output encoding used when revision files are written
output_encoding = utf-8

# Database URL is configured via environment variable DATABASE_URL
# Fallback for local development:
sqlalchemy.url = postgresql://confida_dev:dev_password@localhost:5432/confida_dev

# Additional SQLAlchemy engine options for better performance
sqlalchemy.echo = false
sqlalchemy.pool_size = 5
sqlalchemy.max_overflow = 10
sqlalchemy.pool_timeout = 30
sqlalchemy.pool_recycle = 3600


[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts for code formatting and validation

# format using "black" - use the console_scripts runner, against the "black" entrypoint
hooks = black
black.type = console_scripts
black.entrypoint = black
black.options = -l 79 REVISION_SCRIPT_FILENAME

# lint with attempts to fix using "ruff" - use the exec runner, execute a binary
# hooks = ruff
# ruff.type = exec
# ruff.executable = %(here)s/.venv/bin/ruff
# ruff.options = --fix REVISION_SCRIPT_FILENAME

# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
