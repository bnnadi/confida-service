name: Deploy InterviewIQ Service

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: interviewiq
          POSTGRES_DB: interviewiq_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Wait for database to be ready
      run: |
        until pg_isready -h localhost -p 5432 -U interviewiq; do
          echo "Waiting for database to be ready..."
          sleep 2
        done
        echo "Database is ready!"

    - name: Run database migrations
      env:
        DATABASE_URL: postgresql://interviewiq:password@localhost:5432/interviewiq_test
      run: |
        # Debug: Show environment and database status
        echo "DATABASE_URL: $DATABASE_URL"
        echo "Current directory: $(pwd)"
        echo "Alembic files:"
        ls -la alembic/versions/
        
        # Ensure database exists and user has permissions
        echo "Creating database if it doesn't exist..."
        PGPASSWORD=password psql -h localhost -U interviewiq -d postgres -c "CREATE DATABASE interviewiq_test;" || echo "Database might already exist"
        
        # Test database connection
        echo "Testing database connection..."
        PGPASSWORD=password psql -h localhost -U interviewiq -d interviewiq_test -c "SELECT 1;" || {
          echo "Database connection failed, retrying..."
          sleep 5
          PGPASSWORD=password psql -h localhost -U interviewiq -d interviewiq_test -c "SELECT 1;" || {
            echo "Database connection failed after retry"
            exit 1
          }
        }
        
        # Run migrations
        echo "Running alembic upgrade head..."
        alembic upgrade head || {
          echo "Migration failed, showing alembic status..."
          alembic current
          alembic history
          exit 1
        }
        
        echo "Migrations completed successfully!"
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql://interviewiq:password@localhost:5432/interviewiq_test
        SECRET_KEY: test-secret-key
      run: |
        python -m pytest tests/ -v

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/interviewiq-service:latest
          ${{ secrets.DOCKER_USERNAME }}/interviewiq-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        echo "Deploying to production..."
        # Add your deployment commands here
        # This could be:
        # - Deploy to cloud provider (AWS, GCP, Azure)
        # - Update Kubernetes deployment
        # - Update Docker Swarm service
        # - etc.
